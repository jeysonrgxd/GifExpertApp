{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGif.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","GifGridItem","id","title","url","className","src","alt","getGif","categoria","a","encodeURI","fetch","resp","json","data","infoGif","map","info","images","downsized_medium","GifGrid","cat","loading","state","setState","useEffect","then","console","log","useFetchGifs","class","image","GifExpertApp","categories","categorie","ReactDOM","render","document","getElementById"],"mappings":"iNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACXC,mBAAS,IADE,mBACxCC,EADwC,KAC5BC,EAD4B,KAgB/C,OACG,sBAAMC,SAVY,SAACC,GACnBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,GAEzBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAEzCN,EAAc,KAId,SACG,uBACGO,KAAK,OACLC,MAAOT,EACPU,SAlBY,SAACP,GACnBF,EAAcE,EAAEQ,OAAOF,aAuB7BZ,EAAYe,UAAY,CACrBd,c,OAAee,EAAUC,KAAKC,Y,YC7BpBC,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACtC,OACG,sBAAKC,UAAU,yCAAf,UACG,qBAAKC,IAAKF,EAAKG,IAAKL,IACpB,4BAAIC,Q,uBCNAK,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,yFAC2EO,UAAUF,GADrF,sBAGAG,MAAMR,GAHN,cAGbS,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAGFC,EAAUD,EAAKE,KAAI,SAAAC,GAEtB,MAAO,CACJhB,GAAIgB,EAAKhB,GACTC,MAAOe,EAAKf,MACZC,IAAKc,EAAKC,OAAOC,iBAAiBhB,QAZrB,kBAgBZY,GAhBY,4CAAH,sDCQNK,EAAU,SAAC,GAAa,IAAXC,EAAU,EAAVA,IAAU,ECJR,SAACA,GAAS,IAAD,EACRtC,mBAAS,CAChC+B,KAAM,GACNQ,SAAS,IAHsB,mBAC3BC,EAD2B,KACpBC,EADoB,KA0BlC,OAbAC,qBAAU,WAEPlB,EAAOc,GACHK,MAAK,SAAAR,GACHM,EAAS,CACNV,KAAMI,EACNI,SAAS,IAEZK,QAAQC,IAAIV,QAGlB,IAEIK,EDjBmBM,CAAaR,GAA/BP,EALyB,EAKzBA,KAAMQ,EALmB,EAKnBA,QAUd,OACG,qCACG,oBAAIQ,MAAM,oCAAV,SAA+CT,IAG/C,iCAEIC,GAAW,mBAAGQ,MAAM,mCAAT,0BAGf,qBAAK1B,UAAU,YAAf,SAEMU,EAAKE,KAAI,SAAAe,GAAK,OAEX,aADA,CACC,EAAD,eAAgCA,GAAdA,EAAM9B,aEhC7B+B,EAAe,WAAO,IAAD,EAEKjD,mBAAS,CAAC,cAFf,mBAExBkD,EAFwB,KAEZnD,EAFY,KAY/B,OACG,qCACG,8CAIA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBASGmD,EAAWjB,KAAI,SAAAkB,GACZ,OAAO,cAAC,EAAD,CAAyBb,IAAKa,GAAhBA,U,MC7BpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0619887d.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n   const [inputValue, setInputValue] = useState('')\r\n\r\n   const handleChange = (e) => {\r\n      setInputValue(e.target.value)\r\n   }\r\n\r\n   const handleSubmit = (e) => {\r\n      e.preventDefault()\r\n      if(inputValue.trim().length>2){\r\n         // al recibir la funcion set, podemos utilizar el callback el cual recive como parametro del callback el stado anterior y con eso podemos agregarle lo que queramos\r\n         setCategories(cats => [inputValue, ...cats])\r\n      }\r\n      setInputValue('')\r\n   }\r\n\r\n   return (\r\n      <form onSubmit={handleSubmit}>\r\n         <input\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleChange}\r\n         />\r\n      </form>\r\n   )\r\n}\r\n\r\nAddCategory.prototype = {\r\n   setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n   return (\r\n      <div className=\"card animate__animated animate__fadeIn\">\r\n         <img src={url} alt={id} />\r\n         <p>{title}</p>\r\n      </div>\r\n   )\r\n}\r\n","export const getGif = async (categoria) => {\r\n   const url = `https://api.giphy.com/v1/gifs/search?api_key=6SWLzp5ocE96gxC0IM5MRktqb3lMcnf6&q=${encodeURI(categoria)}&limit=10`\r\n\r\n   const resp = await fetch(url)\r\n   const { data } = await resp.json()\r\n\r\n   // como data tiene un monton de informacion y nosotros queremos solo algunas, ya que este es un array de objetos entonses nos beneficiamos de eso para usar map y devolver nuestro objeto creado con lo que nosotros queremos\r\n   const infoGif = data.map(info => {\r\n      // de cada elemento del array que es un objeto devuelveme un objeto nuevo con los datos que solo yo quiero\r\n      return {\r\n         id: info.id,\r\n         title: info.title,\r\n         url: info.images.downsized_medium.url\r\n      }\r\n   })\r\n\r\n   return infoGif\r\n};\r\n","import React from 'react'\r\n// import { getGif } from '../helpers/getGif'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\n\r\n//<------- importamos nuestro custom hook-----\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ cat }) => {\r\n\r\n   // const [images, setImages] = useState([])\r\n\r\n   // utilizamos nuestro custom hook que nos devuelve un objeto y por eso usamos destructuracion\r\n   const { data, loading } = useFetchGifs(cat)\r\n\r\n   //Este codigo nos sirve para que lo que esta dentro del useEffect se ejecute solo una vez osea cuando el componente es renderizado por primera vez nada mas despues no\r\n   // useEffect(() => {\r\n   //    getGif(cat)\r\n   //       .then(imgs => setImages(imgs))\r\n   // }, [cat])\r\n\r\n   \r\n\r\n   return (\r\n      <>\r\n         <h3 class=\"animate__animated animate__fadeIn\">{cat}</h3>\r\n\r\n         {/*--------- probamos el custom hook------- */}\r\n         <strong>\r\n            {/* esta expresion de js es para que si existe loading me dara nada pero si no existe me dara Loading esto a diferencia de los operadores ternarios, me sirve cuando yo solo quiero mostrar algo cuando sea falso mas no quiero mostrar nada cuando sea verdadero*/}\r\n            {loading && <p class=\"animate__animated animate__flash\">Loading...</p>}\r\n         </strong>\r\n\r\n         <div className=\"card-grid\">\r\n            {\r\n               data.map(image => (\r\n                  // podemos pasarle todos los props de esta manera con el spreed operator solo es recomendable utilizar esto si es que sabes que valores tiene y el cual utilizaras ya que estas pasando todos los valores del objeto image del array de images\r\n                  <GifGridItem key={image.id} {...image} />\r\n               ))\r\n            }\r\n\r\n         </div>\r\n      </>\r\n\r\n   )\r\n}\r\n","// los hooks son funciones,tambine pueden tener estado\r\nimport { useEffect, useState } from 'react'\r\nimport { getGif } from '../helpers/getGif'\r\n\r\nexport const useFetchGifs = (cat) => {\r\n   const [state, setState] = useState({\r\n      data: [],\r\n      loading: true\r\n   })\r\n   // cambiamos el estado y esto cambiara tambien el valor en donde sea que estamos importando este custom hoook\r\n   // setTimeout(_ => {\r\n   //    setstate({\r\n   //       data: [],\r\n   //       loading: false\r\n   //    })\r\n   // }, 3000)\r\n\r\n   useEffect(() => {\r\n\r\n      getGif(cat)\r\n         .then(images => {\r\n            setState({\r\n               data: images,\r\n               loading: false\r\n            })\r\n            console.log(images);\r\n         })\r\n\r\n   }, [])\r\n\r\n   return state\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n   const [categories, setCategories] = useState(['One Punch']);\r\n\r\n   // metodo1\r\n   // const handleAdd = _ => { setCategories([...categories, 'Naruto']) }\r\n\r\n   // metodo2\r\n   // const handleAdd = _ => { \r\n   //  el set Categori puede no solo recivir el valor que modifica el estado sino tambien puede recibir un callback donde su argumento es el valor del estado antes de modificarlo\r\n   // setCategories(cats => [...cats,'Naruto']) \r\n   // }\r\n   return (\r\n      <>\r\n         <h2>GifExpertApp</h2>\r\n         {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n         {/* le pasamos un prop el cual sera el set del state para poder realizar el cambio desde el cpomponente */}\r\n         <AddCategory setCategories={setCategories}/>\r\n         <hr />\r\n         {/* <ol> */}\r\n               {// utilizamos map por que es una expresion que regresa algo, a cambio no utilizamos for o for of ya que esto no devuelves algo\r\n               // categories.map(categorie => {\r\n               //    return <li key ={categorie}> <GifGrid cat={categorie} /></li>\r\n               // })\r\n               }\r\n         {/* </ol> */}\r\n         {\r\n            categories.map(categorie => {\r\n               return <GifGrid key={categorie} cat={categorie} />\r\n            })\r\n         }\r\n         \r\n      </>\r\n   )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}